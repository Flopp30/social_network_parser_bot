import asyncio
import logging

from django.conf import settings
from django.core.management import BaseCommand
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CallbackQueryHandler,
    MessageHandler,
    CommandHandler,
    filters,
    ContextTypes,
)

from bot_parts.helpers import check_bot_context
from bot_parts.keyboards import START_BOARD
from bot_parts.validators import LinkValidator
from parserbot.tasks import parse_tiktok

logger = logging.getLogger('tbot')
job_queue = None


class Command(BaseCommand):
    def handle(self, *args, **options):
        main()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await check_bot_context(update, context, force_update=True)
    if context.user_data['user'].is_approved:
        message = (
            '–û, —Ç—ã –ø–æ–ª—É—á–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. –ù—É —Ç–æ–≥–¥–∞ –¥–∞–≤–∞–π –ø—Ä–∏—Å—Ç—É–ø–∏–º!'
        )
        keyboard = START_BOARD
        STATE = "AWAIT_WELCOME_CHOICE"
    else:
        message = (
            '–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ Social Networks Bot. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @Afremovv'
        )
        keyboard = None
        STATE = "START"
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=message,
        reply_markup=keyboard,
    )
    context.user_data['user'].state = 'START'
    return STATE


async def parser_welcome_handler(update: Update, context: ContextTypes.DEFAULT_TYPE, **kwargs):
    await check_bot_context(update, context)
    message = (
        "–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞\n"
        "–£–º–µ—é: tik-tok (user, music).\n"
        "–ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º:\n"
        "   - –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —á–∏—Å—Ç–æ–π.\n"
        "   - –ù–µ –Ω–∞–¥–æ –∫–∏–¥–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞ —Ç–æ—Ç —Ä–µ—Å—É—Ä—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n<code>https://www.tiktok.com/@domixx007</code> \n\n"
        "<code>https://www.tiktok.com/music/Scary-Garry-6914598970259490818</code>\n\n"
        "–Ø –æ–∫–æ–Ω–µ—á–Ω–æ –æ–±–ª–æ–∂–∏–ª –≤—Å–µ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π, –Ω–æ –¥–∞–≤–∞–π—Ç–µ –Ω–µ –±—É–¥–µ–º –∏—Å–ø—ã—Ç—ã–≤–∞—Ç—å —Å—É–¥—å–±—É üòâ"
    )
    await context.bot.send_message(
        update.effective_chat.id,
        text=message,
        parse_mode='HTML',
    )
    return "AWAIT_LINK_TO_PARSE"


async def parser_start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await check_bot_context(update, context)
    if (decoded_link := LinkValidator.validate(update.message.text)):
        message = ("–°—Å—ã–ª–∫–∞ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é, –ø—Ä–∏—Å—Ç—É–ø–∏–ª –∫ –ø–∞—Ä—Å–∏–Ω–≥—É, –æ–∂–∏–¥–∞–π—Ç–µ.\n "
                   "–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å:\n"
                   "    - –ú—É–∑—ã–∫–∞: 150-200 –≤–∏–¥–µ–æ/—Å–µ–∫\n"
                   "    - –Æ–∑–µ—Ä: 20-30 –≤–∏–¥–µ–æ/—Å–µ–∫.\n"
                   "–ë–æ—Ç –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –≤–µ—Ä–Ω–µ—Ç –∫–∞–∫–æ–π-—Ç–æ –æ—Ç–≤–µ—Ç. "
                   "–í–æ –∏–∑–±–µ–∂–∞–Ω–∏–∏ –≤—Å—è–∫–∏—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ - –Ω–µ –Ω–∞–¥–æ –æ–¥–Ω—É –∏ —Ç—É –∂–µ —Å—Å—ã–ª–∫—É "
                   "–æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –¥–æ –æ—Ç–≤–µ—Ç–∞ üôÑ")
        parse_tiktok.apply_async(args=[decoded_link, update.effective_chat.id])
        await asyncio.sleep(5)
    else:
        message = '–°—Å—ã–ª–∫–∞ –Ω–µ –≤–∞–ª–∏–¥–Ω–∞. –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç–∞–∫ - —Å—Ç—É–∫–Ω–∏—Ç–µ –≤ –ª—Å @Flopp'
    await context.bot.send_message(
        update.effective_chat.id,
        text=message
    )
    return await parser_welcome_handler(update, context, redirect=True)


async def user_input_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await check_bot_context(update, context)
    if update.message:
        user_reply = update.message.text
    elif update.callback_query.data:
        user_reply = update.callback_query.data
    else:
        return
    if not context.user_data['user'].is_approved:
        user_state = context.user_data['user'].state = 'START'
    elif user_reply == '/start':
        user_state = context.user_data['user'].state = 'START'
    else:
        user_state = context.user_data['user'].state or 'START'
    states_function = {
        'START': start,
        'NEW': start,
        "AWAIT_WELCOME_CHOICE": parser_welcome_handler,
        "AWAIT_LINK_TO_PARSE": parser_start_handler,
    }

    state_handler = states_function[user_state]
    next_state = await state_handler(update, context)
    context.user_data['user'].state = next_state
    await context.user_data['user'].asave()


def main():
    import tracemalloc
    tracemalloc.start()
    stream_handler = logging.StreamHandler()
    stream_handler.setLevel(settings.BOT_LOG_LEVEL)
    logger.addHandler(stream_handler)

    application = ApplicationBuilder().token(settings.TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler('start', user_input_handler))
    application.add_handler(CallbackQueryHandler(user_input_handler))
    application.add_handler(MessageHandler(filters.TEXT, user_input_handler))

    try:
        if settings.BOT_MODE == 'webhook':
            logger.warning('Bot started in WEBHOOK mode')
            application.run_webhook(
                listen="0.0.0.0",
                port=5000,
                url_path=settings.TELEGRAM_TOKEN,
                webhook_url=f"{settings.WEBHOOK_URL}{settings.TELEGRAM_TOKEN}"
            )
        else:
            logger.warning('Bot started in POLLING mode')
            application.run_polling()
    except Exception:
        import traceback
        logger.warning(traceback.format_exc())
